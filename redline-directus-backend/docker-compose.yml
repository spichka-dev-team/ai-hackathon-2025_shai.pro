networks:
  redline-network:
    driver: bridge

volumes:
  postgres_dev_data:


services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - redline-network

  directus:
    build:
      context: ./directus
      dockerfile: Dockerfile
    container_name: directus_dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8055:8055"
    env_file:
      - .env
    volumes:
      - ./directus/database:/directus/database
      - ./directus/uploads:/directus/uploads
      #- ./directus/extensions:/directus/extensions   # <── TEMPORARY!!!
      #- ./directus-config:/directus/directus-config
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8055/server/health"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - redline-network

  directus-sync:
    build:
      context: ./directus-sync
      dockerfile: Dockerfile
    image: local/directus-sync:3.3.0
    container_name: directus-sync_dev
    depends_on:
      - directus
    environment:
      DIRECTUS_ADMIN_EMAIL: ${DIRECTUS_EMAIL_SYNC}
      DIRECTUS_ADMIN_PASSWORD: ${DIRECTUS_PASSWORD_SYNC}
      DIRECTUS_URL_SYNC: ${DIRECTUS_URL_SYNC}
    volumes:
      # or in Dockerfile: COPY directus-sync.config.js /work/directus-sync.config.js
      #- ./directus-sync/directus-sync.config.js:/work/directus-sync.config.js:ro
      - ./directus-config:/work/directus-config   # <── Mounts host ./directus-config
    working_dir: /work
    entrypoint: ["directus-sync"]
    profiles:
      - tools
    networks:
      - redline-network

  #ngrok:
  #  image: ngrok/ngrok:3
  #  container_name: ngrok_directus
  #  restart: unless-stopped
  #  depends_on:
  #    directus:
  #      condition: service_healthy
  #  environment:
  #    # Set your token in .env as NGROK_AUTHTOKEN
  #    NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
  #  command:
  #    - http
  #    - --log=stdout
  #    - --hostname=${NGROK_DOMAIN:-}
  #    - directus:8055
  #  ports:
  #    - "4040:4040" # ngrok web UI
  #  profiles:
  #    - tools
  #  networks:
  #    - redline-network
